#!/usr/bin/env python3.7
from argparse import ArgumentParser
from pathlib import Path
import os
import argcomplete

def list_sessions(socket=''):
    if not socket:
        sessions = os.popen('lsof -U 2> /dev/null | sed -n "s/^tmux.*tmux-1000\\/\\([^\\ ]*\).*/\\1/p" | sort -u').read().strip();
        if socket != '':
            print(sessions)
        else:
            return sessions.split('\n')
    else:
        all_sockets = os.popen('lsof -U 2> /dev/null | sed -n "s/^tmux.*tmux-1000\\/\\({}\\).*/\\1/p" | sort -u'.format(
            socket)).read().strip().split('\n')
        if socket in all_sockets:
            print('sessions into socket "{}"'.format(socket))
            os.system('tmux -L "{}" ls'.format(socket))
        else:
            print('no such socket "{}"'.format(socket))

projects_folder = Path.joinpath(Path.home(), 'Projects')
sockets = []

for x in os.listdir(projects_folder):
    project_folder = Path.joinpath(projects_folder, x)
    if os.path.isdir(str(project_folder)):
        sockets.append(x)

top_parser = ArgumentParser(prog='tmuxto')

top_subparser = top_parser.add_subparsers(title='action', dest='action', required=True)

start_parser = top_subparser.add_parser('start')
start_parser.add_argument('socket', type=str, choices=sockets)
start_parser.add_argument('sessions', type=str, nargs='*')

list_sockets = list_sessions()

attach_parser = top_subparser.add_parser('attach')
attach_parser.add_argument('socket', type=str, choices=list_sockets)
attach_parser.add_argument('session', type=str, nargs='?')

kill_parser = top_subparser.add_parser('kill')
kill_parser.add_argument('socket', type=str, choices=list_sockets)
kill_parser.add_argument('sessions', type=str, nargs='*')

list_parser = top_subparser.add_parser('list')
list_parser.add_argument('sockets', type=str, nargs='?', choices=list_sockets)

current_parser = top_subparser.add_parser('current')
current_parser.add_argument('instance', type=str, nargs='?', choices=['socket', 'session'])

argcomplete.autocomplete(top_parser)

parsed_args = top_parser.parse_args()

do_action = {
    'start': lambda: start_session(parsed_args.socket, parsed_args.sessions),
    'attach': lambda: attach_session(parsed_args.socket, parsed_args.session),
    'kill': lambda: kill_session(parsed_args.socket, parsed_args.sessions),
    'list': lambda: list_sessions(parsed_args.sockets),
    'current': lambda: current_instance(parsed_args.instance),
}

def start_session(socket, sessions):
    global projects_folder

    project_folder = Path.joinpath(Path.home(), 'Projects/{}'.format(socket))
    config_template = '.tmux/tmux-{}{}.conf'
    script_template = '.tmux/tmux-{}{}.sh'

    if not Path.exists(projects_folder):
        print('no such directory: {}'.format(projects_folder))
        exit()

    if not Path.exists(project_folder):
        print(os.mkdir(str(project_folder)))

    def start(socket, session, folder, config_template, script_template):
        has_session = os.system('tmux -L "{}" has -t="{}" > /dev/null 2>&1'.format(socket, session)) == 0

        if has_session:
            print('session "{}" already exists'.format(session))
        else:
            if Path.exists(folder):
                os.chdir(str(folder))
            os.system('tmux -L "{}" new-session -d -s "{}" -n "shell"'.format(socket, session))
            print('session "{}-{}" started'.format(socket, session))

            config_file = Path.joinpath(Path.home(), config_template.format(session))
            if Path.exists(config_file):
                os.system('tmux -L "{}" source-file "{}"'.format(socket, str(config_file)))

            script_file = Path.joinpath(Path.home(), script_template.format(session))
            if Path.exists(script_file):
                print('runs {}'.format(str(script_file)))
                os.system(str(script_file));

    if not sessions:
        start(socket, 'root', project_folder,
                config_template.format(socket, ''),
                script_template.format(socket, ''))
    else:
        for session in sessions:
            start(socket, session, Path.joinpath(project_folder, session),
                    config_template.format(socket, '-{}'),
                    script_template.format(socket, '-{}'))

def attach_session(socket, session):
    if session:
        os.system('tmux -L "{}" attach-session -t "{}"'.format(socket, session))
    else:
        os.system('tmux -L "{0}" attach-session -t "{0}"'.format(socket))

def kill_session(socket, sessions):
    if sessions:
        for session in sessions:
            os.system('tmux -L "{}" kill-session -t "{}"'.format(socket, session))
    else:
        os.system('tmux -L "{}" kill-server'.format(socket))

def current_instance(instance):
    socket = os.popen('echo $TMUX | sed -n "s/.*tmux-1000\\/\\([^,]*\\).*/\\1/p"').read().strip()
    session = os.popen('tmux display-message -p "#S"').read().strip()
    if instance == 'socket':
        print(socket)
    elif instance == 'session':
        print(session)
    else:
        if socket == session:
            print(socket)
        else:
            print('[{}] {}'.format(socket, session))

do_action[parsed_args.action]()
